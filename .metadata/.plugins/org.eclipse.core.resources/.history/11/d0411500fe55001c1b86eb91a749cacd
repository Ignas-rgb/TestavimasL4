package tests;

import static org.junit.Assert.fail;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.stream.Stream;

import javax.swing.JLabel;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import frogger.FroggerComponent;
import frogger.FroggerState;
import frogger.PlayFrogger;

//Dar klausimas, o kodel ems darom su JUnit 4 ??? kodel mes su naujesne versija nedarom??
//ten bent kodo tiek refacotrint nereiktu


//TODO - ka galima istestint listas:
/*
 * FroggerComponent.java - {
 * 	4.FroggerState - all states   -- liko kazka su moving pasidaryt
 * }
 * FroggerLevelEngine - su update kaip su trafic intersects, moveup, down ir .t.t. tai cia realiai paliestu ir Frog.java
 *  TrafficPattern - su speed ar nesugriaus zaidimo, nes limito setinimui speedo nera realiai kaip ir bounds, o intersects su frog jau butu ankstesniame testas
 * 
 * */
public class Index {

	@Test
	public void onVictory(){
		PlayFrogger froggerPlay =  new PlayFrogger(); 
		FroggerComponent comp = new FroggerComponent();
		comp.engine.state = FroggerState.WON;
		int level = 10;
		try {
			while(comp.level < level) {
				comp.update();
				comp.engine.state = FroggerState.WON;
			}
			assertEquals(1, comp.endGameAfterVicotory);
			
		} catch (InterruptedException e) {
			e.printStackTrace();
			fail("Test failed: InterruptedException");
		}
	}
	
	
	@Test
	public void CollisionCheck() {
		fail("Not yet implemented");
	}
	
	
}
